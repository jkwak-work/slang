name: CI

on:
  push:
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - 'LICENCE'
      - 'CONTRIBUTION.md'
      - 'README.md'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - 'LICENCE'
      - 'CONTRIBUTION.md'
      - 'README.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  load_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix_build }}
      matrix: ${{ steps.set-matrix.outputs.matrix_test }}

    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        shell: bash
        run: |
          echo "matrix_build=$(cat .github/workflows/matrix_build.json | jq -c .)" >> $GITHUB_OUTPUT
          echo "matrix_test=$(cat .github/workflows/matrix_test.json | jq -c .)" >> $GITHUB_OUTPUT

  build:
    needs: load_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.load_matrix.outputs.matrix_build) }}
    runs-on: ${{ matrix.runs-on }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - uses: ./.github/actions/common-setup
        with:
          os: ${{matrix.os}}
          compiler: ${{matrix.compiler}}
          platform: ${{matrix.platform}}
          config: ${{matrix.config}}
          build-llvm: true

      - name: Build Slang
        run: |
          if [[ "${{ matrix.os }}" =~ "windows" && "${{ matrix.config }}" != "release" ]]; then
            # Doing a debug build will try to link against a release built llvm, this
            # is a problem on Windows, so make slang-llvm in release build and use
            # that as though it's a fetched binary via these presets.
            cmake --workflow --preset slang-llvm
            # Configure, pointing to our just-generated slang-llvm archive
            cmake --preset default --fresh \
              -DSLANG_SLANG_LLVM_FLAVOR=FETCH_BINARY \
              "-DSLANG_SLANG_LLVM_BINARY_URL=$(pwd)/build/dist-release/slang-llvm.zip" \
              "-DCMAKE_COMPILE_WARNING_AS_ERROR=${{matrix.warnings-as-errors}}"
            cmake --workflow --preset "${{matrix.config}}"
          else
            # Otherwise, use the system llvm we have just build or got from the
            # cache in the setup phase
            cmake --preset default --fresh \
              -DSLANG_SLANG_LLVM_FLAVOR=USE_SYSTEM_LLVM \
              -DCMAKE_COMPILE_WARNING_AS_ERROR=${{matrix.warnings-as-errors}}
            cmake --workflow --preset "${{matrix.config}}"
          fi

      - name: Set capitalized config
        run: echo "CONFIG_CAMEL=$(echo ${{ matrix.config }} | sed 's/debug/Debug/;s/release/Release/')" >> $GITHUB_ENV

      - name: Upload Slang
        uses: actions/upload-artifact@v4
        with:
          name: test-${{matrix.os}}-${{matrix.platform}}-${{matrix.compiler}}-${{matrix.config}}
          if-no-files-found: error
          retention-days: 1
          path: |
            build/${{ env.CONFIG_CAMEL }}
            !**/*.pdb
            !**/*.ilk
            !**/*.lib
            !**/*.exp
            !**/*.a

      - name: Upload slang-LLVM
        uses: actions/upload-artifact@v4
        if: ${{ ! matrix.full-gpu-tests }}
        with:
          name: slang-build-${{matrix.os}}-${{matrix.platform}}-${{matrix.compiler}}-${{matrix.config}}
          # The install directory used in the packaging step
          path: build/dist-${{matrix.config}}/**/ZIP/slang/*

  test:
    needs: [load_matrix, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.load_matrix.outputs.matrix_test) }}
    runs-on: ${{ matrix.runs-on }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - uses: ./.github/actions/common-setup
        with:
          os: ${{matrix.os}}
          compiler: ${{matrix.compiler}}
          platform: ${{matrix.platform}}
          config: ${{matrix.config}}

      - name: Set capitalized config
        run: echo "CONFIG_CAMEL=$(echo ${{ matrix.config }} | sed 's/debug/Debug/;s/release/Release/')" >> $GITHUB_ENV

      - name: Download artifacts from build job
        uses: actions/download-artifact@v4
        with:
          name: test-${{matrix.os}}-${{matrix.platform}}-${{matrix.compiler}}-${{matrix.config}}
          path: build/${{ env.CONFIG_CAMEL }}

      - name: "[Debug] list files"
        run: ls -R build
      
      - name: Test Slang
        run: |
          chmod a+x "$bin_dir/"*
          export SLANG_RUN_SPIRV_VALIDATION=1
          export SLANG_USE_SPV_SOURCE_LANGUAGE_UNKNOWN=1
          if [[ "${{matrix.full-gpu-tests}}" == "true" ]]; then
            "$bin_dir/slang-test" \
              -use-test-server \
              -server-count 8 \
              -category ${{ matrix.test-category }} \
              -api all-cpu
          elif [[ "${{matrix.has-gpu}}" == "true" ]]; then
            "$bin_dir/slang-test" \
              -use-test-server \
              -category ${{ matrix.test-category }} \
              -api all-dx12 \
              -expected-failure-list tests/expected-failure-github.txt
          else
            "$bin_dir/slang-test" \
              -use-test-server \
              -category ${{ matrix.test-category }} \
              -api all-dx12 \
              -expected-failure-list tests/expected-failure-github.txt \
              -expected-failure-list tests/expected-failure-record-replay-tests.txt
          fi

      - name: Test Slang via GLSL
        if: ${{matrix.full-gpu-tests}}
        run: |
          export SLANG_RUN_SPIRV_VALIDATION=1
          export SLANG_USE_SPV_SOURCE_LANGUAGE_UNKNOWN=1
            "$bin_dir/slang-test" \
              -use-test-server \
              -server-count 8 \
              -category ${{ matrix.test-category }} \
              -emit-spirv-via-glsl \
              -api vk \
              -expected-failure-list tests/expected-failure.txt

